@page "/"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@using Guide.Data.Models.TourDTOs

<h3>Экскурсионные Маршруты</h3>

<AuthorizeView>
    <Authorized>
        @if (tours == null)
        {
            <p>
                <em>Загрузка списка маршрутов...</em>
            </p>
        }
        else if (!tours.Any())
        {
            <p>Нет доступных маршрутов.</p>
        }
        else
        {
            <ul class="list-group">
                @foreach (var tour in tours)
                {
                    <li class="list-group-item list-group-item-action" @onclick="() => NavigateToTour(tour.TourId)" style="cursor:pointer;">
                        <h5>@tour.Title</h5>
                        <p>@(tour.Description != null ? tour.Description.Substring(0, Math.Min(tour.Description.Length, 100)) + "..." : "Без описания")</p>
                        <div class="tour-meta">
                            <div class="tour-rating">
                                @{
                                    var rating = tourRatings.TryGetValue(tour.TourId, out var r) ? r : null;
                                }
                                @if (rating != null && rating.TotalRatings > 0)
                                {
                                    <div class="rating-stars">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            <span class="star @(i <= Math.Round(rating.AverageRating) ? "selected" : "")">★</span>
                                        }
                                    </div>
                                    <span class="rating-count">(@rating.TotalRatings)</span>
                                }
                                else
                                {
                                    <span class="no-rating">Нет оценок</span>
                                }
                            </div>
                        </div>
                    </li>
                }
            </ul>
        }
    </Authorized>
    <NotAuthorized>
        <p>Пожалуйста, <a href="/login">войдите</a> или <a href="/register">зарегистрируйтесь</a>, чтобы просмотреть экскурсионные маршруты.</p>
    </NotAuthorized>
</AuthorizeView>

<style>
    .tour-rating {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }

    .rating-stars {
        color: #ffd700;
        font-size: 1.2rem;
    }

    .rating-count {
        color: #666;
        font-size: 0.9rem;
    }

    .no-rating {
        color: #999;
        font-size: 0.9rem;
        font-style: italic;
    }
</style>

@code {
    private List<Guide.Data.Models.Tour> tours;
    private HttpClient Http => HttpClientFactory.CreateClient("BackendAPI");
    private Dictionary<Guid, TourRatingDto> tourRatings = new();
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated != true)
        {
            return;
        }

        try
        {
            tours = await Http.GetFromJsonAsync<List<Guide.Data.Models.Tour>>("api/Tours");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки туров: {ex.Message}");
        }

        if (tours != null)
        {
            await LoadTourRatings();
        }
    }

    private async Task LoadTourRatings()
    {
        foreach (var tour in tours)
        {
            try
            {
                var rating = await Http.GetFromJsonAsync<TourRatingDto>($"api/Comments/Tours/{tour.TourId}/rating");
                if (rating != null)
                {
                    tourRatings[tour.TourId] = rating;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка загрузки рейтинга для тура {tour.TourId}: {ex.Message}");
            }
        }
    }

    private void NavigateToTour(Guid tourId)
    {
        Navigation.NavigateTo($"/tours/{tourId}");
    }

}