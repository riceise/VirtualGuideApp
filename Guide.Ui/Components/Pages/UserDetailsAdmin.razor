@page "/admin/user-details/{UserId:guid}"
@attribute [Authorize(Roles = nameof(UserRole.Administrator))]
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject ILogger<UserDetailsAdmin> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Детали Пользователя (Админ)</PageTitle>
<h3>Детали Пользователя</h3>

@if (_isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger">@_errorMessage</div>
    <button class="btn btn-secondary mt-3" @onclick="GoBack">Назад к Админ-панели</button>
}
else if (_user != null)
{
    <div class="card shadow-sm">
        <div class="card-header">
            <h4 class="my-0 fw-normal">@_user.FullName (@_user.Email)</h4>
        </div>
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">ID Пользователя</dt>
                <dd class="col-sm-9">@_user.Id</dd>
                <dt class="col-sm-3">Имя пользователя</dt>
                <dd class="col-sm-9">@_user.UserName</dd>
                <dt class="col-sm-3">Полное имя</dt>
                <dd class="col-sm-9">@_user.FullName</dd>
                <dt class="col-sm-3">Email</dt>
                <dd class="col-sm-9">@_user.Email</dd>
                <dt class="col-sm-3">Роль</dt>
                <dd class="col-sm-9">
                    <span class="badge bg-info text-dark">@_user.Role</span>
                </dd>
                <dt class="col-sm-3">Дата регистрации</dt>
                <dd class="col-sm-9">@_user.CreatedAt.ToString("dd.MM.yyyy HH:mm:ss")</dd>
            </dl>

            <h4 class="mt-4">Туры пользователя (@_userTours.Count)</h4>
            @if (_userTours.Any())
            {
                <ul class="list-group">
                    @foreach (var tour in _userTours)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div>
                                <a href="#" @onclick="() => ShowTourDetails(tour.TourId)" @onclick:preventDefault>
                                    <strong>@tour.Title</strong>
                                </a>
                                <br/>
                                <small>Статус: <span class="badge bg-secondary">@tour.Status</span> | Дата: @tour.CreatedAt.ToString("dd.MM.yyyy")</small>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p class="text-muted">У пользователя нет туров.</p>
            }

            <div class="mt-3">
                <button class="btn btn-danger me-2" @onclick="ConfirmDeleteUser" disabled="@_isProcessing">
                    @if (_isProcessing)
                    {
                        <span class="spinner-border spinner-border-sm"></span>
                    }
                    else
                    {
                        <i class="bi bi-trash"></i>
                    }
                </button>
                <button class="btn btn-secondary" @onclick="GoBack">Назад к Админ-панели</button>
            </div>
        </div>
    </div>
}
else
{
    <p>Пользователь не найден.</p>
    <button class="btn btn-secondary mt-3" @onclick="GoBack">Назад к Админ-панели</button>
}

@code {
    [Parameter] public Guid UserId { get; set; }
    private UserDetailAdminDto? _user;
    private List<AdminTourViewModel_Short> _userTours = new();
    private bool _isLoading = true;
    private bool _isProcessing = false;
    private string? _errorMessage;
    private HttpClient? _httpClient;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("BackendAPI");
        await LoadUserDetails();
    }

    private async Task LoadUserDetails()
    {
        if (_httpClient == null)
        {
            _errorMessage = "HTTP Client Error.";
            _isLoading = false;
            return;
        }

        _isLoading = true;
        _errorMessage = string.Empty;

        try
        {
            _user = await _httpClient.GetFromJsonAsync<UserDetailAdminDto>($"api/Admin/users/{UserId}/full-details");

            if (_user != null)
            {
                _userTours = _user.CreatedTours;
            }
            else
            {
                _errorMessage = "Пользователь не найден.";
            }
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            _errorMessage = "Пользователь не найден.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ошибка загрузки деталей пользователя {UserId}", UserId);
            _errorMessage = $"Ошибка загрузки деталей пользователя: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task ConfirmDeleteUser()
    {
        if (_isProcessing || _httpClient == null) return;
        bool confirmed = await JSRuntime.InvokeAsync<bool>(
            "confirm",
            new object[] { $"Вы уверены, что хотите удалить пользователя '{_user?.FullName}'?" }
        );
        if (confirmed)
        {
            _isProcessing = true;
            StateHasChanged();

            try
            {
                var response = await _httpClient.DeleteAsync($"api/admin/users/{UserId}");
                if (response.IsSuccessStatusCode)
                {
                    Logger.LogInformation("Пользователь {UserId} успешно удален.", UserId);
                    NavigationManager.NavigateTo("/admin");
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Logger.LogWarning("Ошибка удаления пользователя {UserId}. Статус: {StatusCode}. Ответ: {ErrorContent}", UserId, response.StatusCode, errorContent);
                    if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                    {
                        _errorMessage = "Не удалось удалить пользователя: пользователь не найден.";
                    }
                    else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
                    {
                        _errorMessage = $"Не удалось удалить пользователя: {errorContent}";
                    }
                    else
                    {
                        _errorMessage = $"Не удалось удалить пользователя: {response.ReasonPhrase}.";
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Критическая ошибка при удалении пользователя {UserId}", UserId);
                _errorMessage = $"Произошла ошибка при удалении: {ex.Message}";
            }
            finally
            {
                _isProcessing = false;
                StateHasChanged();
            }
        }
    }

    private void ShowTourDetails(Guid tourId)
    {
        NavigationManager.NavigateTo($"/admin/tour-details/{tourId}");
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/admin");
    }

}