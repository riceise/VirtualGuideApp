@page "/tours/{TourId:guid}"
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<TourDetailPage> Logger
@implements IAsyncDisposable
@inject AuthenticationStateProvider AuthStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@using Guide.Data.Models.TourDTOs

@if (isLoading)
{
    <p>
        <em>Загрузка деталей маршрута...</em>
    </p>
}
else if (isLoadingError)
{
    <p class="text-danger">Ошибка загрузки данных маршрута: @errorMessage Пожалуйста, попробуйте позже.</p>
}
else if (tourDetails != null)
{
    <h3>@tourDetails.Title</h3>
    <p>@tourDetails.Description</p>
    @if (tourDetails.TotalDistanceMeters.HasValue)
    {
        <p>Примерное расстояние: @(Math.Round(tourDetails.TotalDistanceMeters.Value / 1000, 2)) км</p>
    }

    @if (tourDetails.TotalDurationSeconds.HasValue)
    {
        <p>Примерное время: @TimeSpan.FromSeconds(tourDetails.TotalDurationSeconds.Value).ToString(@"hh\:mm\:ss")</p>
    }

    <div class="tour-rating mb-3">
        <div class="rating-display">
            @for (int i = 1; i <= 5; i++)
            {
                <span class="star @(i <= Math.Round(tourRating?.AverageRating ?? 0) ? "selected" : "")">★</span>
            }
        </div>
        <span class="rating-text">
            @if (tourRating?.TotalRatings > 0)
            {
                @($"{tourRating.AverageRating:F1} из 5 ({tourRating.TotalRatings} {GetRatingWord(tourRating.TotalRatings)})")
            }
            else
            {
                @("Нет оценок")
            }
        </span>
    </div>

    <div style="position: relative; height: 500px; width: 100%; border: 1px solid #ccc;">
        <div id="@mapContainerId" style="height: 100%; width: 100%;"></div>
        
        <button class="btn btn-primary position-absolute" 
                style="bottom: 10px; right: 10px; z-index: 1000;"
                @onclick="ShowCurrentLocation">
            @if (isLoadingLocation)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            <i class="fas fa-location-arrow"></i> Моё местоположение
        </button>

        @if (!string.IsNullOrEmpty(locationError))
        {
            <div class="alert alert-danger position-absolute" 
                 style="bottom: 60px; right: 10px; z-index: 1000;">
                @locationError
            </div>
        }

        @if (isMapInitializing)
        {
            <div class="d-flex justify-content-center align-items-center"
                 style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: #f0f0f0; z-index: 1000;">
                <p class="m-0">Инициализация карты...</p>
            </div>
        }
    </div>
    @if (!isMapReady && !isMapInitializing)
    {
        <p class="text-danger">Не удалось инициализировать карту. Пожалуйста, обновите страницу.</p>
    }

    @if (tourDetails.Stops.Any())
    {
        <h4>Точки маршрута:</h4>
        <ul class="list-group mt-3">
            @foreach (var stop in tourDetails.Stops.OrderBy(s => s.Order))
            {
                <li class="list-group-item">
                    <h5>
                        <strong>@stop.Order. @stop.Name</strong>
                    </h5>
                    @if (!string.IsNullOrWhiteSpace(stop.TextDescription))
                    {
                        <p>@stop.TextDescription</p>
                    }
                    @if (stop.ImageUrls.Any())
                    {
                        <div>
                            @foreach (var imageUrl in stop.ImageUrls)
                            {
                                <img src="@GetFullImageUrl(imageUrl)" alt="@stop.Name" style="max-width:100px; max-height:100px; margin:5px; border:1px solid #ddd;"/>
                            }
                        </div>
                    }
                </li>
            }
        </ul>
    }

    <div class="comments-section mt-4">
        <h4>Комментарии</h4>
        
        @if (isAuthenticated)
        {
            <div class="add-comment mb-3">
                <div class="rating mb-2">
                    @for (int i = 1; i <= 5; i++)
                    {
                        var rating = i;
                        <span class="star @(rating <= selectedRating ? "selected" : "")" 
                            @onclick="() => SelectRating(rating)">
                            ★
                        </span>
                    }
                </div>
                <div class="form-group">
                    <textarea 
                        class="form-control" 
                        @bind="newCommentText" 
                        placeholder="Оставьте свой комментарий..."
                        rows="3">
                    </textarea>
                </div>
                <button 
                    class="btn btn-primary mt-2" 
                    @onclick="AddComment" 
                    disabled="@(string.IsNullOrWhiteSpace(newCommentText) || isAddingComment)">
                    @if (isAddingComment)
                    {
                        <span class="spinner-border spinner-border-sm"></span>
                        <span> Отправка...</span>
                    }
                    else
                    {
                        <span>Отправить</span>
                    }
                </button>
            </div>
        }

        @if (comments == null)
        {
            <p><em>Загрузка комментариев...</em></p>
        }
        else if (!comments.Any())
        {
            <p>Пока нет комментариев. Будьте первым!</p>
        }
        else
        {
            <div class="comments-list">
                @foreach (var comment in comments.OrderByDescending(c => c.CreatedAt))
                {
                    <div class="comment-item">
                        <div class="comment-header">
                            <strong>@comment.UserName</strong>
                            <small class="text-muted">@comment.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small>
                        </div>
                        <div class="rating-display">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <span class="star @(i <= comment.Rating ? "selected" : "")">★</span>
                            }
                        </div>
                        <div class="comment-body">
                            @comment.Text
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    <style>
        .tour-rating {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .rating-text {
            color: #666;
            font-size: 0.9rem;
        }

        .rating-display {
            color: #ffd700;
            font-size: 1.5rem;
        }

        .comments-section {
            margin-top: 2rem;
            padding: 1rem;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .comment-item {
            padding: 1rem;
            margin-bottom: 1rem;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            background-color: #f8f9fa;
        }

        .comment-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }

        .comment-body {
            white-space: pre-wrap;
        }
        .user-location-marker {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .user-location-marker div {
            box-shadow: 0 0 10px rgba(33, 150, 243, 0.5);
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0% {
                transform: scale(1);
                opacity: 1;
            }
            50% {
                transform: scale(1.2);
                opacity: 0.8;
            }
            100% {
                transform: scale(1);
                opacity: 1;
            }
        }

        .rating {
            font-size: 24px;
            color: #ddd;
        }

        .star {
            cursor: pointer;
            transition: color 0.2s;
        }

        .star:hover,
        .star.selected {
            color: #ffd700;
        }

        .rating-display {
            font-size: 18px;
        }

        .rating-display .star {
            cursor: default;
        }

        .comment-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
            
    </style>
}
else
{
    <p>Маршрут не найден или данные не загружены.</p>
}

@code {
    [Parameter] public Guid TourId { get; set; }

    private Guide.Api.Controllers.ToursController.TourDetailsResponse tourDetails;
    private bool isLoading = true;
    private TourRatingDto tourRating;
    private bool isLoadingError = false;
    private bool isMapReady = false;
    private bool isMapInitializing = false; 
    private string errorMessage = string.Empty;
    private string apiBaseUrl;
    private HttpClient httpClient;
    private DotNetObjectReference<TourDetailPage> dotNetObjectReference;
    private string mapContainerId = "tour-detail-map"; 
    private CancellationTokenSource mapInitCts;
    private bool _mapInitializationAttempted = false; 
    private List<CommentViewModel> comments;
    private string newCommentText = string.Empty;
    private bool isAddingComment = false;
    private bool isAuthenticated = false;

    private bool isLoadingLocation = false;
    private string locationError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        httpClient = HttpClientFactory.CreateClient("BackendAPI");
        apiBaseUrl = httpClient.BaseAddress?.ToString().TrimEnd('/') ?? "http://localhost:5255";
        Logger.LogInformation("TourDetailPage Initialized for TourId: {TourId}. API Base URL: {ApiBaseUrl}", TourId, apiBaseUrl);

        dotNetObjectReference = DotNetObjectReference.Create(this);
        mapInitCts = new CancellationTokenSource(TimeSpan.FromSeconds(15)); 

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        
        await LoadTourDetails();
        await LoadComments();
        await LoadTourRating();
    }

    private async Task LoadTourRating()
    {
        try
        {
            tourRating = await httpClient.GetFromJsonAsync<TourRatingDto>($"api/Comments/Tours/{TourId}/rating");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ошибка при загрузке рейтинга");
        }
    }

    private string GetRatingWord(int count)
    {
        var lastDigit = count % 10;
        var lastTwoDigits = count % 100;

        if (lastTwoDigits >= 11 && lastTwoDigits <= 19)
            return "оценок";

        return lastDigit switch
        {
            1 => "оценка",
            2 or 3 or 4 => "оценки",
            _ => "оценок"
        };
    }

    private async Task LoadTourDetails()
    {
        isLoading = true;
        isLoadingError = false;
        isMapReady = false; 
        _mapInitializationAttempted = false; 
        errorMessage = string.Empty;
        await InvokeAsync(StateHasChanged);

        try
        {
            Logger.LogInformation("Загрузка деталей для тура: {TourId}", TourId);
            tourDetails = await httpClient.GetFromJsonAsync<Guide.Api.Controllers.ToursController.TourDetailsResponse>($"api/Tours/{TourId}/details");

            if (tourDetails == null)
            {
                Logger.LogWarning("Детали тура не найдены для TourId: {TourId}", TourId);
                isLoadingError = true;
                errorMessage = "Данные тура не найдены.";
            }
            else
            {
                Logger.LogInformation("Детали тура для TourId: {TourId} успешно загружены. Название: {TourTitle}", TourId, tourDetails.Title);
            }
        }
        catch (HttpRequestException ex)
        {
            Logger.LogError(ex, "Ошибка HTTP при загрузке деталей тура {TourId}", TourId);
            isLoadingError = true;
            errorMessage = $"Ошибка сети: {ex.Message}";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Общая ошибка загрузки деталей тура {TourId}", TourId);
            isLoadingError = true;
            errorMessage = $"Произошла ошибка: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadComments()
    {
        try
        {
            comments = await httpClient.GetFromJsonAsync<List<CommentViewModel>>($"api/Comments/Tours/{TourId}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ошибка при загрузке комментариев");
        }
    }

    private int selectedRating = 0;

    private void SelectRating(int rating)
    {
        selectedRating = rating;
    }

    private async Task AddComment()
    {
        if (string.IsNullOrWhiteSpace(newCommentText) || selectedRating == 0) return;
        
        isAddingComment = true;
        try
        {
            var comment = new AddCommentRequest
            {
                Text = newCommentText,
                Rating = selectedRating
            };

            var response = await httpClient.PostAsJsonAsync($"api/Comments/Tours/{TourId}", comment);
            if (response.IsSuccessStatusCode)
            {
                newCommentText = string.Empty;
                selectedRating = 0;
                await LoadComments();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ошибка при добавлении комментария");
        }
        finally
        {
            isAddingComment = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
        if (!isLoading && tourDetails != null && !isLoadingError && !isMapReady && !_mapInitializationAttempted)
        {
            _mapInitializationAttempted = true; 
            await InitializeAndDisplayMap();
        }
    }

    private async Task InitializeAndDisplayMap()
    {
        
        isMapInitializing = true; 
        await InvokeAsync(StateHasChanged); 

        Logger.LogInformation("Начало инициализации карты Leaflet для тура: {TourTitle}", tourDetails.Title);

        try
        {
            var containerExists = await JSRuntime.InvokeAsync<bool>("eval", $"!!document.getElementById('{mapContainerId}')");
            if (!containerExists)
            {
                Logger.LogError("Контейнер карты '{MapContainerId}' не найден в DOM.", mapContainerId);
                isMapInitializing = false; 
                isLoadingError = true; 
                errorMessage = "Ошибка: Контейнер карты не найден. Обновите страницу.";
                await InvokeAsync(StateHasChanged);
                return;
            }

            var firstStop = tourDetails.Stops.OrderBy(s => s.Order).FirstOrDefault();
            double centerLat = firstStop?.Latitude ?? 46.3497; 
            double centerLng = firstStop?.Longitude ?? 48.0302; 

            await JSRuntime.InvokeVoidAsync("initLeafletMap", mapInitCts.Token, mapContainerId, centerLat, centerLng, 13, dotNetObjectReference);
        }
        catch (OperationCanceledException) 
        {
            Logger.LogError(mapInitCts.Token.IsCancellationRequested ? "Тайм-аут JS Interop вызова initLeafletMap." : "Операция отменена.", "Тайм-аут инициализации карты для тура: {TourTitle}", tourDetails.Title);
            isMapInitializing = false; 
            isLoadingError = true;
            errorMessage = "Превышено время ожидания инициализации карты.";
            await InvokeAsync(StateHasChanged);
        }
        catch (JSException ex) 
        {
            Logger.LogError(ex, "JS ошибка во время вызова initLeafletMap для тура: {TourTitle}", tourDetails.Title);
            isMapInitializing = false; 
            isLoadingError = true;
            errorMessage = $"JS ошибка инициализации карты: {ex.Message}";
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex) 
        {
            Logger.LogError(ex, "Общая ошибка инициализации карты Leaflet для тура: {TourTitle}", tourDetails.Title);
            isMapInitializing = false; 
            isLoadingError = true;
            errorMessage = $"Ошибка инициализации карты: {ex.Message}";
            await InvokeAsync(StateHasChanged);
        }
    }

    [JSInvokable]
    public async Task NotifyMapReadyInternal()
    {
        isMapReady = true;
        isMapInitializing = false; 
        Logger.LogInformation("C#: Карта Leaflet готова для тура: {TourTitle}. Отрисовка контента.", tourDetails?.Title);
        await InvokeAsync(StateHasChanged); 

        if (tourDetails == null || !tourDetails.Stops.Any())
        {
            Logger.LogWarning("Данные тура отсутствуют или нет точек для отображения на карте после готовности карты.");
            return;
        }

        try
        {
            foreach (var stop in tourDetails.Stops.OrderBy(s => s.Order))
            {
                await JSRuntime.InvokeVoidAsync("addLeafletMarker", stop.Latitude, stop.Longitude, stop.Name ?? $"Точка {stop.Order}");
            }

            if (tourDetails.RouteSegmentsGeometry != null && tourDetails.RouteSegmentsGeometry.Any())
            {
                foreach (var segmentGeometry in tourDetails.RouteSegmentsGeometry)
                {
                    if (segmentGeometry != null && segmentGeometry.Any())
                    {
                        var jsRoute = segmentGeometry.Select(coord => new[] { coord[0], coord[1] }).ToList();
                        await JSRuntime.InvokeVoidAsync("drawLeafletRoute", jsRoute, "purple", 5);
                    }
                }
            }

            var stopLatLngs = tourDetails.Stops.Select(s => new List<double> { s.Latitude, s.Longitude }).ToList();
            if (stopLatLngs.Any())
            {
                await JSRuntime.InvokeVoidAsync("fitMapToPoints", stopLatLngs);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ошибка при отрисовке объектов на карте для тура: {TourTitle}", tourDetails.Title);
            errorMessage = $"Ошибка отображения объектов на карте: {ex.Message}";
            isLoadingError = true; 
            await InvokeAsync(StateHasChanged);
        }
    }

    [JSInvokable]
    public void OnMapClicked(double lat, double lng) 
    {
        Logger.LogInformation("Карта кликнута (страница деталей тура): Lat={Lat}, Lng={Lng}. Действий не предпринимается.", lat, lng);
    }


    private string GetFullImageUrl(string relativeUrl)
    {
        if (string.IsNullOrWhiteSpace(relativeUrl)) return string.Empty;
        if (relativeUrl.StartsWith("http://") || relativeUrl.StartsWith("https://") || relativeUrl.StartsWith("data:"))
        {
            return relativeUrl;
        }

        return $"{apiBaseUrl.TrimEnd('/')}/{relativeUrl.TrimStart('/')}";
    }

    public async ValueTask DisposeAsync()
    {
        if (mapInitCts != null)
        {
            mapInitCts.Cancel(); 
            mapInitCts.Dispose();
            mapInitCts = null;
        }

        if (dotNetObjectReference != null)
        {
            dotNetObjectReference.Dispose();
            dotNetObjectReference = null;
        }

        if (isMapReady && JSRuntime != null) 
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("disposeLeafletMap");
                Logger.LogInformation("disposeLeafletMap вызван для {MapContainerId} на странице TourDetailPage", mapContainerId);
            }
            catch (JSDisconnectedException)
            {
                Logger.LogInformation("JSDisconnectedException проигнорирован при вызове disposeLeafletMap (TourDetailPage).");
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Ошибка при вызове disposeLeafletMap в TourDetailPage.");
            }
        }
    }

    public class CommentViewModel
    {
        public Guid CommentId { get; set; }
        public string UserName { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
        public int Rating { get; set; }
    }

    private async Task ShowCurrentLocation()
    {
        if (!isMapReady)
        {
            locationError = "Дождитесь загрузки карты";
            return;
        }

        try
        {
            isLoadingLocation = true;
            locationError = string.Empty;
            StateHasChanged();
            
            var location = await JSRuntime.InvokeAsync<LocationData>("getCurrentLocation");
            await JSRuntime.InvokeVoidAsync("showUserLocation", location.Lat, location.Lng);
        }
        catch (JSException ex)
        {
            locationError = "Ошибка карты: " + ex.Message;
            Logger.LogError(ex, "JavaScript ошибка при получении местоположения");
        }
        catch (Exception ex)
        {
            locationError = "Не удалось получить местоположение";
            Logger.LogError(ex, "Ошибка при получении местоположения");
        }
        finally
        {
            isLoadingLocation = false;
            StateHasChanged();
        }
    }

    private class LocationData
    {
        public double Lat { get; set; }
        public double Lng { get; set; }
    }

    
}